‚úÖ Paso a paso para verificar el token en el backend (NestJS)

1. üìÑ Crear un archivo con la Service Account de Firebase  
   Desde la consola de Firebase:  
   - Ir a **Configuraci√≥n del proyecto ‚Üí Cuentas de servicio**  
   - Clic en **"Generar nueva clave privada"**  
   - Guard√° el archivo `.json` (ej: `firebase-admin.json`) en `src/firebase/`  

   ‚ö†Ô∏è **No subas este archivo a Git. A√±adilo al `.gitignore`.**

2. ‚öôÔ∏è Crear `firebase.module.ts` para inicializar Firebase Admin  

```typescript
// src/firebase/firebase.module.ts
import { Global, Module } from '@nestjs/common';
import * as admin from 'firebase-admin';
import * as serviceAccount from './firebase-admin.json'; // ‚ö†Ô∏è Este es tu archivo de clave

@Global()
@Module({
  providers: [
    {
      provide: 'FIREBASE_ADMIN',
      useFactory: () => {
        return admin.initializeApp({
          credential: admin.credential.cert(serviceAccount as admin.ServiceAccount),
        });
      },
    },
  ],
  exports: ['FIREBASE_ADMIN'],
})
export class FirebaseModule {}
```

   Luego lo import√°s en `AppModule`:

```typescript
// src/app.module.ts
import { Module } from '@nestjs/common';
import { FirebaseModule } from './firebase/firebase.module';
import { UsersModule } from './users/users.module';

@Module({
  imports: [FirebaseModule, UsersModule],
})
export class AppModule {}
```

3. üõ°Ô∏è Crear `FirebaseAuthGuard` para verificar el token  

```typescript
// src/auth/firebase-auth.guard.ts
import {
  CanActivate,
  ExecutionContext,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import * as admin from 'firebase-admin';
import { Request } from 'express';

@Injectable()
export class FirebaseAuthGuard implements CanActivate {
  async canActivate(context: ExecutionContext): Promise<boolean> {
    const req = context.switchToHttp().getRequest<Request>();
    const authHeader = req.headers.authorization;

    if (!authHeader?.startsWith('Bearer ')) {
      throw new UnauthorizedException('Missing or invalid token');
    }

    const token = authHeader.split('Bearer ')[1];

    try {
      const decoded = await admin.auth().verifyIdToken(token);

      // Attach user to request
      req['user'] = {
        uid: decoded.uid,
        email: decoded.email,
        name: decoded.name,
        picture: decoded.picture,
      };

      return true;
    } catch (error) {
      console.error('‚ùå Firebase token verification failed', error);
      throw new UnauthorizedException('Invalid token');
    }
  }
}
```

4. üß™ Usarlo en un controlador  

```typescript
// src/users/users.controller.ts
import { Controller, Post, Req, UseGuards } from '@nestjs/common';
import { FirebaseAuthGuard } from '../auth/firebase-auth.guard';
import { Request } from 'express';

@Controller('api/users')
export class UsersController {
  @Post('sync')
  @UseGuards(FirebaseAuthGuard)
  async sync(@Req() req: Request) {
    const user = req['user']; // viene del guard

    // Aqu√≠ pod√©s guardar el usuario en tu DB si quer√©s
    console.log('‚úÖ Usuario verificado desde Firebase:', user);

    return {
      message: 'Usuario autenticado con √©xito',
      user,
    };
  }
}
```

üß† **Recapitulando**  

| Parte                        | Archivo                              | Rol                          |
|------------------------------|--------------------------------------|------------------------------|
| Clave privada de Firebase    | `src/firebase/firebase-admin.json`  | Permite verificar tokens     |
| M√≥dulo de Firebase           | `src/firebase/firebase.module.ts`   | Inicializa Admin SDK         |
| Guard                        | `src/auth/firebase-auth.guard.ts`   | Verifica el token del header |
| Uso del guard                | `@UseGuards(FirebaseAuthGuard)` en controller | Protege la ruta |